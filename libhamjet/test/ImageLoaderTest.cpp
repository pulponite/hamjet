#include "Hamjet/ImageLoader.hpp"
#include "gtest/gtest.h"

#include <stdio.h>


class ImageLoaderPngTest : public ::testing::Test {
private:
	/*
	* 2x2 png. |Red  |   Green    |
	           |Blue | 50,100,150 |
	*/
	unsigned char test_png[126] = {
		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
		0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02,
		0x08, 0x02, 0x00, 0x00, 0x00, 0xfd, 0xd4, 0x9a, 0x73, 0x00, 0x00, 0x00,
		0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00,
		0x00, 0x04, 0x67, 0x41, 0x4d, 0x41, 0x00, 0x00, 0xb1, 0x8f, 0x0b, 0xfc,
		0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
		0x0e, 0xc3, 0x00, 0x00, 0x0e, 0xc3, 0x01, 0xc7, 0x6f, 0xa8, 0x64, 0x00,
		0x00, 0x00, 0x13, 0x49, 0x44, 0x41, 0x54, 0x18, 0x57, 0x63, 0xf8, 0xcf,
		0xc0, 0x00, 0xc6, 0x0c, 0xff, 0x8d, 0x52, 0xa6, 0x01, 0x00, 0x1b, 0xe8,
		0x04, 0x2a, 0x83, 0x49, 0xd4, 0x92, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
		0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
	};
	unsigned int test_png_len = 126;

protected:
	FILE* tmpPng;

protected:

	virtual void SetUp() {
		tmpPng = tmpfile();
		fwrite(test_png, 1, test_png_len, tmpPng);
		fflush(tmpPng);
		fseek(tmpPng, 0, 0);
	}

	virtual void TearDown() {
		fclose(tmpPng);
	}

	void testPixel(SDL_Surface* s, int x, int y, uint32_t result) {
		uint32_t pixel = ((uint32_t*)((uint8_t*)s->pixels + (s->pitch * y)))[x];
		EXPECT_EQ(result,pixel);
	}
};

TEST_F(ImageLoaderPngTest, FileLoadsCorrectly) {
	SDL_Surface* s = Hamjet::ImageLoader::loadPng(tmpPng);
	EXPECT_NE((SDL_Surface*)0, s);
	EXPECT_EQ(2, s->w);
	EXPECT_EQ(2, s->h);
	//Check pixel 4
	EXPECT_EQ(SDL_PIXELFORMAT_ABGR8888, s->format->format);

	testPixel(s, 0, 0, 0xFF0000FF);
	testPixel(s, 1, 0, 0xFF00FF00);
	testPixel(s, 0, 1, 0xFFFF0000);
	testPixel(s, 1, 1, 0xFF966432);
}

TEST_F(ImageLoaderPngTest, FileConvertsCorrectly) {
	SDL_Surface* s = Hamjet::ImageLoader::loadPng(tmpPng, SDL_PIXELFORMAT_ARGB8888);

	EXPECT_EQ(SDL_PIXELFORMAT_ARGB8888, s->format->format);

	testPixel(s, 0, 0, 0xFFFF0000);
	testPixel(s, 1, 0, 0xFF00FF00);
	testPixel(s, 0, 1, 0xFF0000FF);
	testPixel(s, 1, 1, 0xFF326496);
}